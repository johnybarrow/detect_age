from aiogram import types
from misc import dp, bot, TOKEN
from requests import get
from .detect import get_new_photo, name_of_age
from json import loads, dumps
from random import randint
import asyncio
from os import listdir, remove
import re

regex_link = re.compile(
    r'^(?:http|ftp)s?://'  # http:// or https://
    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # domain...
    r'localhost|'  # localhost...
    r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
    r'(?::\d+)?'  # optional port
    r'(?:/?|[/?]\S+)$', re.IGNORECASE)

all_files_json = 'handlers/all_files.json'
result_array_json = 'handlers/result_array.json'

players_array = dict()

try:
    all_files = loads(open(all_files_json).read())
except:
    all_files = dict()

try:
    result_array = loads(open(result_array_json).read())
except:
    result_array = {'faces_num': 0, 'faces_links': []}

print('all_files: ', all_files)
print('result_array: ', result_array)

MAX_FILES = 41
GAME_BORDER = 10

age_dataset = [i.strip().split(',') for i in open('dataset/age_set.csv').readlines()]


@dp.message_handler(content_types=['photo'])
async def handle_photo(msg: types.Message):
    await bot.send_chat_action(msg.from_user.id, 'typing')
    file_id = msg.photo[-1]['file_id']
    response = loads(get(f'https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}').text)

    if response['ok']:
        photo = get(f'https://api.telegram.org/file/bot{TOKEN}/{response["result"]["file_path"]}').content
        result_array['faces_num'] += 1
        result_array['faces_links'].append(
            f'https://api.telegram.org/file/bot{TOKEN}/{response["result"]["file_path"]}')
        print(f'https://api.telegram.org/file/bot{TOKEN}/{response["result"]["file_path"]}')
        new_photo_inf = get_new_photo(photo)
        await bot.send_photo(msg.from_user.id, new_photo_inf[0], caption=new_photo_inf[1])
    else:
        await send_photo(msg.from_user.id, 'dataset/witcher_process.jpg',
                         "–•–º–º, –∑–∞—Ä–∞–∑–∞... –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–æ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª–∞—è")


@dp.message_handler(commands=['game'])
async def start_game(msg: types.Message):
    new_img_id = randint(1, MAX_FILES)
    players_array[msg.from_user.id] = {'playing': True, 'prev_img': new_img_id, 'score': 0, 'AI_score': 0,
                                       'was_id': [new_img_id]}
    if str(msg.from_user.id) not in result_array:
        result_array[str(msg.from_user.id)] = []

    await msg.reply("–ù—É –¥–∞–≤–∞–π—Ç–µ  –ø–æ–∏–≥—Ä–∞–µ–º:")
    print(f'dataset/{new_img_id}.jpg')
    await send_photo(msg.from_user.id, f'dataset/{new_img_id}.jpg', "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –í—ã –¥–∞–¥–∏—Ç–µ —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?")


@dp.message_handler(commands=['stop'])
async def stop_game(msg: types.Message):
    if msg.from_user.id in players_array:
        score, AI_score = players_array[msg.from_user.id]['score'], players_array[msg.from_user.id]['AI_score']

        if score == AI_score:
            frase = '–ù–∏—á—å—è!\n–°—ã–≥—Ä–∞–µ—Ç–µ –µ—â–µ? /game'
        elif score < AI_score:
            frase = '–£—Ö —Ç—ã! –í—ã –æ–¥–æ–ª–µ–ª–∏ –ò–ò?\n–ê –µ—â–µ —Ä–∞–∑ —Å–º–æ–∂–µ—Ç–µ? /game'
        else:
            frase = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –ò–ò, –Ω—É –∞ –∫—Ç–æ –±—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è?\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /game'

        await bot.send_message(msg.from_user.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –æ—à–∏–±–æ–∫: {score} {name_of_age(score)}\n'
                                                 f'–û—à–∏–±–æ–∫ –ò–ò: {AI_score}  {name_of_age(AI_score)}\n'
                                                 f'{frase}')

        result_array[str(msg.from_user.id)].append((score, AI_score))
        open(result_array_json, 'w').write(dumps(result_array))
        players_array[msg.from_user.id]['playing'] = False


@dp.message_handler(commands=['send_all'])
async def send_all(msg: types.Message):
    await msg.reply(r"–°–∞–º –ø–æ–ø—Ä–æ—Å–∏–ª ¬Ø\_(„ÉÑ)_/¬Ø")
    for file in sorted(listdir('dataset')):
        if file.endswith('jpg'):
            await send_photo(msg.from_user.id, f'dataset/{file}')

    await msg.reply(f'–≠—Ç–æ –≤—Å–µ! {len(all_files)}')
    open(all_files_json, 'w').write(dumps(all_files))
    print(len(all_files))


# @dp.message_handler(commands=['qq'])
# async def qq(msg: types.Message):
#     await msg.reply(r"–°–∞–º –ø–æ–ø—Ä–æ—Å–∏–ª ¬Ø\_(„ÉÑ)_/¬Ø")
#     for file in sorted(listdir('dataset')):
#         if 'process' in file and 'witcher' not in file:
#             remove(f'dataset/{file}')
#


@dp.message_handler(commands=['send_stat'])
async def send_stat(msg: types.Message):
    await bot.send_document(878744319, open('handlers/result_array.json', 'rb').read())


@dp.message_handler(commands=['check_all'])
async def check_all(msg: types.Message):
    await msg.reply(r"–ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ ...")
    all_files_in_check_all = sorted(listdir('dataset'))
    for i, file in enumerate(all_files_in_check_all):
        if file.split('.')[0] + '_process.jpg' not in all_files_in_check_all and \
                'process' not in file and file.endswith('jpg'):
            file = 'dataset/' + file
            open(file.split('.')[0] + '_process.jpg', 'wb').write(get_new_photo(open(file, 'rb').read())[0])
            await bot.send_message(msg.from_user.id, f'{i + 1}) {file}')
    await bot.send_message(msg.from_user.id, f'–í—Å–µ —Ñ–∞–π–ª—ã –æ—Ü–∏—Ñ—Ä–æ–≤–∞–Ω—ã')


@dp.message_handler(commands=['start'])
async def process_start_command(msg: types.Message):
    await bot.send_message(msg.from_user.id,
                           f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}! –Ø –º–æ–≥—É *—É–≥–∞–¥–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç* —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!\n "
                           f"–Ø - \"—Å–ª–∞–±—ã–π\" (–Ω–µ üí™) –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç, —Ç–æ –µ—Å—Ç—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è "
                           f"—Å—Ç–æ—Ä–æ–≥–æ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ - "
                           f"_–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞_. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —è –∏ –¥—Ä—É–≥–∏–µ –ø–æ–¥–æ–±–Ω—ã–µ –º–Ω–µ –ò–ò - `—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ` "
                           f"–±–µ–∑–≤—Ä–µ–¥–Ω—ã, "
                           f"–∏ –º—ã —Ç–æ—á–Ω–æ *–ù–ï* —Å–º–æ–∂–µ–º –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –º–∏—Ä _(–ù—É —Ö–æ—Ç—è –±—ã –ø–æ—Ç–æ–º—É, —á—Ç–æ –º—ã –Ω–µ –∑–Ω–µ–º –∫–∞–∫ üòÑ)_",
                           parse_mode=types.ParseMode.MARKDOWN)

    await bot.send_chat_action(msg.from_user.id, 'typing')
    await asyncio.sleep(8)

    await bot.send_message(msg.from_user.id,
                           f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ *—Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä, –í–∞—à–µ üòÑ), –∞ —è, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ—é "
                           f"`–Ω–µ–π—Ä–æ—Å–µ—Ç—å`, –ø–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –µ–º—É _–ª–µ—Ç_?",
                           parse_mode=types.ParseMode.MARKDOWN)

    await bot.send_chat_action(msg.from_user.id, 'typing')
    await asyncio.sleep(4)

    await bot.send_message(msg.from_user.id,
                           f"–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤ –∏–≥—Ä–µ `\"–£–≥–∞–¥–∞–π —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç?\"`. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ "
                           f"/game –∏ –≤–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `27`",
                           parse_mode=types.ParseMode.MARKDOWN)


@dp.message_handler(commands=['help'])
async def process_help_command(msg: types.Message):
    await msg.reply("/game - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n/stop - –û–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É\n"
                    "–ß—Ç–æ–±—ã —è –º–æ–≥ —É–≥–∞–¥–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –Ω—É–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞")


@dp.message_handler(commands=['dev'])
async def process_help_command(msg: types.Message):
    await msg.reply("/send_all - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≤—Å–µ —Ñ–∞–π–ª—ã\n"
                    "/check_all - –û–±—Ä–∞—Ç–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–∞–π–ª—ã\n"
                    "/send_stat - –ü—Ä–∏—Å–ª–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä")


@dp.message_handler()
async def number_end(msg: types.Message):
    if msg.text.strip().isdigit() and msg.from_user.id in players_array and players_array[msg.from_user.id]['playing']:
        age = int(msg.text.strip())
        real_age, AI_age = get_age_by_id(players_array[msg.from_user.id]['prev_img'])

        players_array[msg.from_user.id]['score'] += abs(real_age - age)
        players_array[msg.from_user.id]['AI_score'] += abs(AI_age - real_age)

        prev_img_id = players_array[msg.from_user.id]['prev_img']

        new_img_id = randint(1, MAX_FILES)
        while new_img_id in players_array[msg.from_user.id]['was_id']:
            new_img_id = randint(1, MAX_FILES)

        players_array[msg.from_user.id]['was_id'].append(new_img_id)
        players_array[msg.from_user.id]['prev_img'] = new_img_id

        shablon = f"–í—ã –¥—É–º–∞–ª–∏, —á—Ç–æ –µ–º—É/–µ–π {age} {name_of_age(age)}, –∞ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ {real_age} {name_of_age(real_age)}"

        if real_age == age:
            ans = f"–í —è–±–ª–æ—á–∫–æ! –≠—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É {age} {name_of_age(age)}"
        elif abs(real_age - age) < 8:
            ans = "–í—ã –ø–æ—á—Ç–∏ –ø—Ä–∞–≤—ã! " + shablon
        elif abs(real_age - age) < 15:
            ans = "–î–∞–ª–µ–∫–æ–≤–∞—Ç–æ! " + shablon
        else:
            ans = "–°–æ–≤—Å–µ–º –¥–∞–ª–µ–∫–æ! " + shablon

        await bot.send_message(msg.from_user.id, ans)

        # await bot.send_message(msg.from_user.id, f'Your delta: {abs(real_age - age)}')
        # await bot.send_message(msg.from_user.id, f'AI delta: {abs(AI_age - real_age)}')

        await send_photo(msg.from_user.id, f"dataset/{prev_img_id}_process.jpg",
                         "–ê –≤–æ—Ç, —á—Ç–æ –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—Ç –Ω–∞—à–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å", 2)

        if len(players_array[msg.from_user.id]['was_id']) == GAME_BORDER:
            await stop_game(msg)
        else:
            await send_photo(msg.from_user.id, f'dataset/{new_img_id}.jpg', "–ê —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –í—ã –¥–∞–¥–∏—Ç–µ —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?",
                             4)
    elif is_link(msg.text.strip()):
        await bot.send_chat_action(msg.from_user.id, 'typing')
        url = msg.text.strip()

        try:
            photo = get(url).content
            print(url)
            new_photo_inf = get_new_photo(photo)
            await bot.send_photo(msg.from_user.id, new_photo_inf[0], caption=new_photo_inf[1])
        except:
            await send_photo(msg.from_user.id, 'dataset/witcher_process.jpg',
                             "–û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è")
    else:
        await bot.send_message(msg.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /help")


def get_age_by_id(photo_id):
    return int(age_dataset[photo_id - 1][1]), int(age_dataset[photo_id - 1][2])


def is_link(link):
    return re.match(regex_link, link) is not None


async def send_photo(to, filename, caption="", sleep_time=0):
    await bot.send_chat_action(to, 'upload_photo')
    if sleep_time:
        await asyncio.sleep(sleep_time)

    file_tusent = all_files[filename] if filename in all_files else open(filename, 'rb').read()
    sended_photo = await bot.send_photo(to, file_tusent, caption=caption)

    if filename not in all_files:
        all_files[filename] = sended_photo.photo[0].file_id
